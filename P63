import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start to current node
        self.h = h  # Heuristic estimate from current node to goal
    
    def f(self):
        return self.g + self.h

def astar_search(start_state, goal_state, heuristic_func, neighbors_func):
    open_list = []
    closed_set = set()
    
    start_node = Node(start_state, g=0, h=heuristic_func(start_state, goal_state))
    heapq.heappush(open_list, (start_node.f(), start_node))
    
    while open_list:
        _, current_node = heapq.heappop(open_list)
        
        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]
        
        closed_set.add(current_node.state)
        
        for neighbor in neighbors_func(current_node.state):
            if neighbor in closed_set:
                continue
            
            g = current_node.g + 1  # Assuming uniform cost
            h = heuristic_func(neighbor, goal_state)
            neighbor_node = Node(neighbor, parent=current_node, g=g, h=h)
            
            if any(neighbor_node.state == node.state for _, node in open_list):
                continue
            
            heapq.heappush(open_list, (neighbor_node.f(), neighbor_node))
    
    return None

# Example usage:
def heuristic(state, goal_state):
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

def neighbors(state):
    x, y = state
    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]  # Example: 4-connected grid

start = (0, 0)
goal = (4, 4)
path = astar_search(start, goal, heuristic, neighbors)
print("A* Path:", path)
