alpha-beta:
import math

def minimax(state, depth, alpha, beta, maximizing_player):
    if depth == 0 or terminal_state(state):
        return evaluate(state)
    
    if maximizing_player:
        max_eval = -math.inf
        for child_state in get_children(state):
            eval = minimax(child_state, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cut-off
        return max_eval
    else:
        min_eval = math.inf
        for child_state in get_children(state):
            eval = minimax(child_state, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Alpha cut-off
        return min_eval

# Example usage:
initial_state = ...
best_move = None
best_value = -math.inf
for move in get_possible_moves(initial_state):
    value = minimax(move, depth=3, alpha=-math.inf, beta=math.inf, maximizing_player=False)
    if value > best_value:
        best_value = value
        best_move = move

print("Best Move:", best_move)
